<templateSet group="Typescript">
  <template name="update" value="export const update = (action: Action&lt;any&gt;, state: $MODEL$) =&gt; {&#10;  switch (action.type) {&#10;    case '$CASE$':&#10;      return $RESULT$&#10;    default: &#10;      return state&#10;  }&#10;}" description="creates a redux update function" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CASE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RESULT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="iuv" value="import {createComponent, matchActionC, matchActionR} from 'd11-core'&#10;&#10;export interface $INAME$ {&#10;}&#10;&#10;export interface $INAME$Params {&#10;}&#10;&#10;&#10;export const reducers = {}&#10;export const commands = {}&#10;&#10;export const component = createComponent({&#10;    init: (): $INAME$ =&gt; {&#10;        return {}&#10;    },&#10;    view:(e: Hoe, m: $INAME$, p: $INAME$Params) =&gt; {&#10;        return h('div.$INAME$', [&#10;            'TODO(view): $INAME$'&#10;        ])&#10;    },&#10;    update: matchActionR(reducers),&#10;    command: matchActionC(commands)    &#10;})" description="creates init() update() and view() functions" toReformat="true" toShortenFQNames="true">
    <variable name="INAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fws" value="$PROP$: forwardS('$PROP$', $PROP$.update)" description="Creates forwardS" toReformat="false" toShortenFQNames="true">
    <variable name="PROP" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fwe" value="$PROP$: forwardE('$PROP$', $PROP$.command)" description="Creates forwardE" toReformat="false" toShortenFQNames="true">
    <variable name="PROP" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tog" value="R.tap(console.log)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="todo" value="/*&#10; * TODO($CONTEXT$): when $WHEN$&#10; * do $WHAT$&#10; * so that $WHY$&#10; */&#10;" description="Create a new todo comment" toReformat="false" toShortenFQNames="true">
    <variable name="CONTEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WHEN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WHAT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WHY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="mtest" value="describe('$SUITE$', () =&gt; {&#10;    it('should $MESSAGE$', () =&gt; {&#10;        &#10;    }) &#10;})" description="Mocha Snippet" toReformat="true" toShortenFQNames="true">
    <variable name="SUITE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MESSAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="flog" value="// FIXME: $MESSAGE$&#10;console.warn('FIXME: $MESSAGE$') // tslint:disable-line no-console" description="Logs todo items on the screen" toReformat="true" toShortenFQNames="true">
    <variable name="MESSAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="routetest" value="describe('', () =&gt; {&#10;    const SAMPLE_PARAMS = {&#10;      tourName: 'ind-vs-sri',&#10;      roundId: 100,&#10;      tourId: 1000,&#10;      contestId: 10,&#10;      amount: 8888,&#10;      matchId: 1,&#10;      teamId: 2,&#10;      returnUrl: '/abc/cd',&#10;      site: 'cricket',&#10;      switchTeam: true&#10;    }&#10;    it('should match route', () =&gt; {})&#10;    it('should return url with params', () =&gt; {})&#10;})" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>